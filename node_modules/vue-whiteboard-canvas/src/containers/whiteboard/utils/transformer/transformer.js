import Konva from "konva";
import {useWhiteboardStore} from "../../store/whiteboard";
import {ref} from 'vue';
import {useHistoryStore} from "../../store/history";

const transformer = ref({});
const selected = ref([]);


const {layer} = useWhiteboardStore();


const initTransformer = () => {
  // init if transformer.value is not found in layer
  const layerHasTransformer = layer.value.children.findIndex((node) => (node instanceof Konva.Transformer)) !== -1;

  // or transformer.value is not an instance
  const transformerValueIsEmpty = !(transformer.value instanceof Konva.Transformer);
  console.log({layerHasTransformer});
  console.log({transformerValueIsEmpty});

  if(!layerHasTransformer || transformerValueIsEmpty){
    console.log('init');

    if(!transformerValueIsEmpty){
      // prevent memory leak
      console.log('destroyed memory leak');
      transformer.value.destroy();
    }
    transformer.value = new Konva.Transformer();
    layer.value.add(transformer.value);
  }

}

const isNodeInTransformer = (node) => {
  const names = node.name().split(' ');
  const isAnchor = names.includes('_anchor');
  const indexFound = transformer.value.nodes().findIndex((transformerNode) => node._id === transformerNode._id );
  return isAnchor || indexFound !== -1 ;
}

const setTransformerNodes = (nodes) => {
  initTransformer();
  transformer.value.nodes(nodes);
  selected.value = nodes;

}

const addNodeToTransformer = (node) => {
  console.log('add node to transformer')
  const nodes = transformer.value.nodes().concat([node]);
  transformer.value.nodes(nodes);
  // layer.value.batchDraw();
}

const removeTransformerNode = (nodeToRemove) => {

  const nodes = transformer.value.nodes.slice(); // use slice to have new copy of array
  // remove node from array
  nodes.splice(nodes.indexOf(nodeToRemove), 1);
  transformer.value.nodes(nodes);
  // layer.value.batchDraw();
}


const clearTransformer = () => {
  if(transformer.value instanceof Konva.Transformer){
    transformer.value.nodes([]);
    layer.value.batchDraw();
    console.log('cleared transformer')
  }
}

export function useTransformer(){
  return {
    transformer,
    selected,
    isNodeInTransformer,
    addNodeToTransformer,
    setTransformerNodes,
    removeTransformerNode,
    clearTransformer,
    initTransformer,
  }
}
