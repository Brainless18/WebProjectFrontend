// drawing rectangle
import Konva from "konva";
import {ref} from 'vue';
import {useWhiteboardStore} from "../../store/whiteboard";
import {useHistoryStore} from "../../store/history";
import {throttle} from "lodash";
import {useColorStore} from "../../store/color";
import {useStrokeStore} from "../../store/stroke";


const {states, currentDrawingObject, lastMouseClickPos, tempLayer, isFirstClick, isSecondClick} = useWhiteboardStore();
const { record } = useHistoryStore();
const {colorSelected} = useColorStore();
const {strokeWidth} = useStrokeStore();


export default function (stage, layer){

  const onCircleMouseDown = () => {
    // create rect instance
    currentDrawingObject.value = new Konva.Circle({
      x: lastMouseClickPos.xPos,
      y: lastMouseClickPos.yPos,
      radius: 1,
      fill: colorSelected.value,
      stroke: 'black',
      strokeWidth: strokeWidth.value,
      draggable: true,
    });
    tempLayer.value.add(currentDrawingObject.value);
    tempLayer.value.batchDraw();
  }

  const onCircleMouseUp = () => {
    // fix circle instance
    layer.value.add(currentDrawingObject.value);
    tempLayer.value.destroyChildren();
    layer.value.draw();
    tempLayer.value.draw();
    record()
  }

  const onCircleMouseMove = (x, y) => {
    // adjust rect width and height
    if(!states.isDrawing){
      return ;
    }

    const throttled = throttle(() => {
      // use selection box logic
      const width = (x - lastMouseClickPos.xPos) ;
      const height = (y - lastMouseClickPos.yPos) ;
      // using pythagoras theorem
      const radius = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
      currentDrawingObject.value.radius(radius);

    }, 500);
    throttled()
    tempLayer.value.batchDraw();

  }

  return {
    onCircleMouseDown,
    onCircleMouseUp,
    onCircleMouseMove,
  }
}
