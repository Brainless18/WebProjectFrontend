import {throttle} from "lodash";
import Konva from "konva";
import {useWhiteboardStore} from "../../store/whiteboard";
import {useHistoryStore} from '../../store/history';
import {useColorStore} from "../../store/color";
import {useStrokeStore} from "../../store/stroke";

const { record } = useHistoryStore();
const {states, currentDrawingObject, tempLayer} = useWhiteboardStore();
const {colorSelected} = useColorStore();
const {strokeWidth, blurness} = useStrokeStore();

export default (stage, layer) => {

  const throttledRecord = throttle(record, 1000);

  let mouseX, mouseY;

  const throttleDraw = throttle(() => {

    if(!currentDrawingObject.value.points){
      return ;
    }

    currentDrawingObject.value.points(currentDrawingObject.value.points().concat([mouseX, mouseY]));

    console.log(blurness.value);

    // convert into img using cache
    if(blurness.value > 0){
      currentDrawingObject.value.cache();
      currentDrawingObject.value.filters([Konva.Filters.Blur]);
      currentDrawingObject.value.blurRadius(blurness.value);
    }

    // tempLayer.value.batchDraw();
    layer.value.batchDraw();

  }, 20);

  const onPencilMouseMove = (x, y) => {
    if(!states.isDrawing){
      return ;
    }

    [mouseX, mouseY] = [x, y];

    throttleDraw()

    throttledRecord();
  }

  const onPencilMouseUp = () => {
    currentDrawingObject.value = {}
  }

  const onPencilMouseDown = () => {
    currentDrawingObject.value = new Konva.Line({
      points: [],
      stroke: colorSelected.value,
      strokeWidth: strokeWidth.value,
      lineCap: 'round',
      lineJoin: 'round',
      tension: 1,

    });

    layer.value.add(currentDrawingObject.value);

  }

  return {
    onPencilMouseMove,
    onPencilMouseUp,
    onPencilMouseDown,
  }

}
