import Konva from "konva";
import {useWhiteboardStore} from "../../store/whiteboard";
import {throttle} from "lodash";
import {useHistoryStore} from "../../store/history";
import {useColorStore} from "../../store/color";
import {useStrokeStore} from "../../store/stroke";

const {states, currentDrawingObject, lastMouseClickPos, tempLayer, isFirstClick, isSecondClick} = useWhiteboardStore();
const { record } = useHistoryStore();
const {colorSelected} = useColorStore();
const {strokeWidth} = useStrokeStore();

export default (stage, layer) => {

  const onLineMouseDown = () => {
    // if first click,
    // record node position
    if(isFirstClick()){
      currentDrawingObject.value = new Konva.Line({
        points: [lastMouseClickPos.xPos, lastMouseClickPos.yPos],
        stroke: colorSelected.value,
        strokeWidth: strokeWidth.value,
        lineCap: 'round',
        lineJoin: 'round',
      })
      tempLayer.value.add(currentDrawingObject.value);
    }

    // if second click, confirm adding line
    // reset click counter
    if(isSecondClick()){
      states.clickCounter = 0;
      console.log('record line');

      layer.value.add(currentDrawingObject.value);
      tempLayer.value.destroyChildren();
      layer.value.draw();
      tempLayer.value.draw();
      record()
    }
  }
  const onLineMouseUp = () => {}

  const onLineMouseMove = (mouseX, mouseY) => {
    if (isFirstClick()){
      // first click
      // move second node around
      const throttled = throttle(() => {
        currentDrawingObject.value.points(currentDrawingObject.value.points().slice(0,2).concat([mouseX, mouseY]));
      }, 500);
      throttled()
      tempLayer.value.batchDraw();
    }

  }

  return {
    onLineMouseUp,
    onLineMouseDown,
    onLineMouseMove,
  }
}
