// drawing rectangle
import Konva from "konva";
import {ref} from 'vue';
import {useWhiteboardStore} from "../../store/whiteboard";
import {useHistoryStore} from "../../store/history";
import {throttle} from "lodash";
import {useColorStore} from "../../store/color";
import {useStrokeStore} from "../../store/stroke";

const {states, currentDrawingObject, lastMouseClickPos, tempLayer, isFirstClick, isSecondClick} = useWhiteboardStore();
const { record } = useHistoryStore();
const {colorSelected} = useColorStore();
const {strokeWidth} = useStrokeStore();

export default function (stage, layer){

  const onRectMouseDown = () => {

    // create rect instance
    currentDrawingObject.value = new Konva.Rect({
      x: lastMouseClickPos.xPos,
      y: lastMouseClickPos.yPos,
      width: 1,
      height: 1,
      fill: colorSelected.value,
      stroke: 'black',
      strokeWidth: strokeWidth.value,
      draggable: true,
    });
    tempLayer.value.add(currentDrawingObject.value);
    tempLayer.value.batchDraw();
  }

  const onRectMouseUp = () => {
    // finalise rect instance
    layer.value.add(currentDrawingObject.value);
    // tempLayer.value.destroyChildren();
    tempLayer.value.removeChildren();
    layer.value.draw();
    tempLayer.value.draw();
    record()
  }

  const onRectMouseMove = (x, y) => {
    if(!states.isDrawing){
      return ;
    }

    // adjust rect width and height
    // move second node around
    const throttled = throttle(() => {
      // use selection box logic
      const width = x - lastMouseClickPos.xPos;
      const height = y - lastMouseClickPos.yPos;
      currentDrawingObject.value.width(width);
      currentDrawingObject.value.height(height);
    }, 500);
    throttled()
    tempLayer.value.batchDraw();
  }

  return {
    onRectMouseDown,
    onRectMouseUp,
    onRectMouseMove,
  }
}
