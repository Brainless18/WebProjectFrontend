import {throttle} from 'lodash';
import {useWhiteboardStore} from "../../../store/whiteboard";
import {useStrokeStore} from "../../../store/stroke";

const {lastMouseClickAbsPos, stage} = useWhiteboardStore();
const {blurness, strokeWidth} = useStrokeStore();

const states = {
  currentX: 0,
  currentY: 0,
  lastX: lastMouseClickAbsPos.xPos,
  lastY: lastMouseClickAbsPos.yPos,
}

const UP = 'up';
const LEFT = 'left';
const DOWN = 'down';
const RIGHT = 'right';


const calcAngle = () => {
  // using arc tan
  // y position are calculated from the top
  // so we need to inverse it
  const y = -(states.currentY - states.lastY);
  const x = states.currentX - states.lastX;
  return radToDeg(Math.atan2(y, x));
}

const radToDeg = (radian) => {
  return (radian / Math.PI) * 180;
}

const movingDirection = (event) => {

  const angle = calcAngle();
  const absAngle = Math.abs(angle);

  const isMovingLeft = absAngle >= 135;
  if(isMovingLeft){
    console.log('moving left');
    return LEFT;
  }

  const isMovingRight = absAngle <= 45;
  if(isMovingRight){
    console.log('moving right');
    return RIGHT;
  }

  const isMovingUp = angle > 45 && angle < 135;
  if(isMovingUp){
    console.log('moving up');
    return UP;
  }
  const isMovingDown = angle < -45 && angle > -135;
  if(isMovingDown){
    console.log('moving down');
    return DOWN;
  }
  console.error('unknown position, angle:', angle)

}

const onAltRightClickMove = (event) => {

  const throttled = throttle(() => {
    const pointerPosition = stage.value.getPointerPosition();

    [states.lastX, states.lastY] = [states.currentX, states.currentY];

    [states.currentX, states.currentY] = [pointerPosition.x, pointerPosition.y];

    // find out which quadrant is it moving
    const direction = movingDirection(event);

    // top quadrant -> increase blurness
    if(direction === UP){
      blurness.value ++
      console.log(blurness.value);
    }
    // bottom quadrant -> decrease blurness
    if(direction === DOWN && blurness.value > 0){
      blurness.value --
    }

    // left -> decrease size
    if(direction === LEFT && strokeWidth.value > 0){
      strokeWidth.value--;
    }
    // right -> increase size
    if(direction === RIGHT){
      strokeWidth.value++;
    }


  }, 200);

  throttled();
}


export const onAlt = (event) => {


}

export const useOnAlt = () => {
  return {
    onAltRightClickMove
  }
}
