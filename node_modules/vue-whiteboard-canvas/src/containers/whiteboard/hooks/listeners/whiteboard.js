import {useWhiteboardStore} from "../../store/whiteboard";
import {listeners} from "./tool-listeners";
import useText from "../tools/useText";
import {useQuillStore} from "../../store/quill";
import Quill from 'quill';
import {getRelativePointerPosition} from "../../utils/konva/pointer";
import {onWheel} from "./mouse/on-wheel";
import { useMiddleMouseListener } from "./mouse/on-middle-mouse";
import {onToolChange} from "./tool/on-tool-change";
import Konva from "konva";
import {useTransformer} from "../../utils/transformer/transformer";
import useMove from "../tools/useMove";
import {useRightClickListener} from "./mouse/on-right-click";

const {states, layer, lastMouseClickPos, toolSelected, stage, setToolSelected, lastMouseClickAbsPos } = useWhiteboardStore();
const {swapQuillWithImage} = useText();
const {onMiddleMouseUp, onMiddleMouseDown} = useMiddleMouseListener();
const {onRightClickDown, onRightClickUp, onRightClickMove} = useRightClickListener();


const onEscPressed = () => {
  switch (toolSelected.value.toLowerCase()) {
    case 'text':
      console.log('esc text')
      swapQuillWithImage();
      break;
  }
}

const onMouseDown = (event) => {

  console.log('mousedown');
  const mousePos = getRelativePointerPosition(stage.value);
  const mouseAbsPos = stage.value.getPointerPosition();

  [lastMouseClickPos.xPos, lastMouseClickPos.yPos] = [mousePos.x, mousePos.y];
  [lastMouseClickAbsPos.xPos, lastMouseClickAbsPos.yPos] = [mouseAbsPos.x, mouseAbsPos.y];


  if(event.evt.button === 1){
    return onMiddleMouseDown(event);
  }

  if(event.evt.button === 2){
    return onRightClickDown(event);
  }

  states.isDrawing = true;
  states.clickCounter += 1;


  listeners[toolSelected.value.toLowerCase()]?.onMouseDown(event);
}

const onMouseUp = (event) => {
  console.log('mouseup');
  states.isDrawing = false

  if(event.evt.button === 1){
    return onMiddleMouseUp();
  }
  if(event.evt.button === 2){
    return onRightClickUp();
  }

  listeners[toolSelected.value.toLowerCase()]?.onMouseUp(event);

  // currentDrawingObject.value = {}
}

const onMouseMove = (event) => {
  if(event.evt.buttons === 2){
    return onRightClickMove(event);
  }

  // const mousePos = stage.value.getPointerPosition();
  const mousePos = getRelativePointerPosition(stage.value);
  listeners[toolSelected.value.toLowerCase()]?.onMouseMove(mousePos.x, mousePos.y);
}


export const useWhiteboardEventListeners = () => {
  return {
    onEscPressed,
    onToolChange,
    onMouseDown,
    onMouseUp,
    onMouseMove,
    onWheel,
  }
}

