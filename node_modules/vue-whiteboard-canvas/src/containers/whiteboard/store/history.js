import {ref, reactive} from 'vue';
import {useWhiteboardStore} from "./whiteboard";
import {useTransformer} from "../utils/transformer/transformer";
import Konva from "konva";

const maxHistory = 50;

const {states, stage, layer} = useWhiteboardStore();
const {initTransformer} = useTransformer();
const currentStep = ref(0);
const undoStep = ref(0);


// an array of array
// each element is an array of konva objects that builds the full canvas
const history = ref([]);

const hasHistoryReachedMax = () => {
  return currentStep.value === maxHistory;
}
// record all the object currently in stage to a new element in history
const record = () => {
  const children = layer.value.getChildren();

  // slice off undo steps
  const end = history.value.length - undoStep.value;
  history.value = history.value.slice(0, end);

  history.value.push(children.map((node) => node.clone()));
  // history.value.push(cloneDeep(children));

  const reachedMax = hasHistoryReachedMax();

  if(undoStep.value !== 0){
    currentStep.value = history.value.length;
  }else {
    // only increment if yet to reach max history
    currentStep.value = reachedMax ? currentStep.value : currentStep.value + 1;
  }

  if(reachedMax){
    // remove first element in history
    history.value.shift();
  }

  undoStep.value = 0;
}


const undo = () => {
  if (currentStep.value === 0 || currentStep.value === 1) {
    return;
  }

  currentStep.value -= 1;
  undoStep.value += 1;
  console.log('undo');

  rerenderCurrentLayer();
}

const rerenderCurrentLayer = () => {
  layer.value.destroyChildren();
  // transformer is destroyed as well, we need to re-add it to layer
  initTransformer();
  // const newLayer = new Konva.Layer();
  // layer.value = newLayer;

  console.log('removed children');
  // const rect = new Konva.Rect({
  //   x: 50,
  //   y: 50,
  //   width: 100,
  //   height: 100,
  //   fill: 'green',
  //   stroke: 'black',
  //   strokeWidth: 4,
  //   draggable: true,
  // });
  // layer.value.add(rect);
  // TODO: finish debug this
  history.value[currentStep.value-1]?.forEach((object) => {
    // newLayer.add(cloneDeep(object));
    layer.value.add(object.clone());
  });
  layer.value.draw();

  console.log('stage', stage.value);
}

const redo = () => {

  if (undoStep.value === 0) {
    return;
  }
  undoStep.value -= 1;
  currentStep.value += 1;
  rerenderCurrentLayer()
  console.log('redo');
}

// save all object currently in the layer to server or indexdb
const save = () => {

}

export function useHistoryStore() {

  return {
    currentStep,
    record,
    undo,
    redo,
    history,
  }
}
